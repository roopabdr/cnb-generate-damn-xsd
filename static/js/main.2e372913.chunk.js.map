{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","element_field","element_texarea","length_field","length_textarea","data_field","data_textarea","object_name","click","generateXSD","console","log","_this","xsd_begin_wrapper","concat","Object","toConsumableArray","elements","length","map","item","index","split","downloadFile","filename","content","content_type","file_extension","element","document","createElement","file","Blob","type","href","URL","createObjectURL","download","body","appendChild","onFieldInputChange","event","setState","target","value","onLengthInputChange","onDataInputChange","onObjectInputChange","onGenerateClick","elem_value","replace","trim","toString","length_value","this","onGenerateDataClick","data_value","generateSampleFile","data","padStart","padEnd","react_default","a","className","placeholder","onChange","onClick","name","id","cols","rows","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2e372913.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n\n  state = {\n    element_field: [],    \n    element_texarea: '',\n    length_field: [],\n    length_textarea: '',\n    data_field: [],\n    data_textarea: '',\n    object_name: '',    \n    click: false\n  }  \n  \n  generateXSD = () => {\n    console.log(this.state.element_field, this.state.length_field);\n    \n    let xsd_begin_wrapper = '';\n    let xsd_end_wrapper = '';\n    xsd_begin_wrapper = `<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n    <xsd:schema xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n            xmlns:nxsd=\"http://xmlns.oracle.com/pcbpel/nxsd\"\n            xmlns:tns=\"http://www.oracle.com/FTPAdapter\"\n            targetNamespace=\"http://www.oracle.com/FTPAdapter\"\n            elementFormDefault=\"qualified\"\n            attributeFormDefault=\"unqualified\"\n            nxsd:version=\"NXSD\"\n            nxsd:stream=\"chars\"\n            nxsd:encoding=\"US-ASCII\">\n        \n    <xsd:element name=\"${this.state.object_name}\">\n    <xsd:complexType>\n\t\t\t<xsd:choice minOccurs=\"0\" maxOccurs=\"unbounded\" nxsd:choiceCondition=\"fixedLength\" nxsd:length=\"0\">\n\t\t\t\t<xsd:element name=\"${this.state.object_name}_RECORD\" nxsd:style=\"array\" nxsd:cellSeparatedBy=\"\\${eol}\" nxsd:conditionValue=\"\">\n\t\t\t\t\t<xsd:complexType>\n            <xsd:sequence>`;\n    \n    xsd_end_wrapper = `</xsd:sequence>\n    </xsd:complexType>\n    </xsd:element>\n    </xsd:choice>\n    </xsd:complexType>\n    </xsd:element>\n    </xsd:schema>`;\n    // console.log(xsd_begin_wrapper+xsd_end_wrapper);\n\n    let element_field = [...this.state.element_field];\n    let length_field = [...this.state.length_field];\n    let elements = '';\n\n    if (element_field.length === length_field.length) {\n\n      element_field.map((item, index) => {\n        item.split(\"_\")[1] === 'Blank' || item.split(\"_\")[1] === 'Default'\n        ? elements += `<xsd:element name=\"${item}\" type=\"xsd:string\" nxsd:style=\"fixedLength\" nxsd:length=\"${length_field[index].split(\"_\")[1]}\" nxsd:padStyle=\"tail\" />\\n`\n        : elements += `<xsd:element name=\"${item}\" type=\"xsd:string\" minOccurs=\"0\" nxsd:style=\"fixedLength\" nxsd:length=\"${length_field[index].split(\"_\")[1]}\" />\\n`;\n        return null;\n      })\n    }\n    // console.log(elements);\n    this.downloadFile(this.state.object_name, xsd_begin_wrapper+elements+xsd_end_wrapper, 'text/xml', 'xsd');\n    // return <div><h1>12345456</h1></div>;\n  }\n\n  generateSampleFile(){\n    let data  = '';\n    let data_field = [...this.state.data_field];\n    let length_field = [...this.state.length_field];\n\n    data_field.map((item, index) => {\n      // console.log('length_field[index]', length_field[index]);\n      // console.log(item.padStart(length_field[index], ' '));\n      item.split(\"_\")[1] === 'Amt'\n      ? data += item.split(\"_\")[0].toString().padStart(length_field[index].split(\"_\")[1], '0')\n      : (\n        item === 'Blank'\n        ? data += ''.padEnd(length_field[index], \" \")\n        : data += item.toString().padEnd(length_field[index].split(\"_\")[1], \" \")\n        );\n      return null;\n    });\n\n    this.downloadFile(this.state.object_name+' Data', data, 'text/plain', 'txt');\n  }\n\n  downloadFile = (filename, content, content_type, file_extension) => {\n    const element = document.createElement(\"a\");\n    const file = new Blob([content], {type: content_type});\n    element.href = URL.createObjectURL(file);\n    element.download = `${filename}.${file_extension}`;\n    document.body.appendChild(element); // Required for this to work in FireFox\n    element.click();\n  }\n\n  onFieldInputChange = (event) => {\n    this.setState({element_texarea: event.target.value, click: false});\n  }\n\n  onLengthInputChange = (event) => {\n    this.setState({length_textarea: event.target.value, click: false});\n  }\n\n  onDataInputChange = (event) => {\n    this.setState({data_textarea: event.target.value, click: false});\n  }\n\n  onObjectInputChange = (event) => {\n    this.setState({object_name: event.target.value, click: false});\n  }\n\n  onGenerateClick = () => {\n    let elem_value = this.state.element_texarea.replace(/^\\s*$(?:\\r\\n?|\\n)/gm,'').trim().split('\\n');\n    elem_value = elem_value.map((item, index) => 'f' + (index + 1).toString().concat('_',item.replace(/ /g,'_')));\n\n    let length_value = this.state.length_textarea.replace(/^\\s*$(?:\\r\\n?|\\n)/gm,'').trim().split('\\n');\n    length_value = length_value.map((item, index) => 'f' + (index + 1).toString().concat('_',item.replace(/ /g,'_')));\n\n    // this.setState({element_field: elem_value, length_field: length_value, click: true});\n    this.setState({element_field: elem_value, length_field: length_value}, function() {\n      this.generateXSD();\n    });\n  }\n\n  onGenerateDataClick = () => {\n    // console.log(this.state.data_textarea);\n    let data_value = this.state.data_textarea.replace(/^\\s*$(?:\\r\\n?|\\n)/gm,'').trim().split('\\n');\n\n    this.setState({data_field: data_value}, function(){\n      this.generateSampleFile();\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <h1>Generate Damn XSD for CNB</h1>          \n          <input type=\"text\" placeholder='Enter Object RICE ID' className='input_text' onChange={this.onObjectInputChange}/>\n          <button className=\"success\" onClick={this.onGenerateClick}>Generate</button>\n          <button className=\"success\" onClick={this.onGenerateDataClick}>Generate Sample Data</button>\n        </header>\n        <div className='fields'>\n          <div className='fields_area'>\n            <h2>Copy/Paste field names here:</h2>\n            <textarea name=\"fields\" id=\"fields_id\" cols=\"40\" rows=\"25\" onChange={this.onFieldInputChange}></textarea>\n          </div>\n          <div className='length_area'>\n            <h2>Copy/Paste field lenghts here: </h2>\n            <textarea name=\"length\" id=\"length_id\" cols=\"20\" rows=\"25\" onChange={this.onLengthInputChange}></textarea>\n          </div>\n          <div className='data_area'>\n            <h2>Copy/Paste field data here: </h2>\n            <textarea name=\"data\" id=\"data_id\" cols=\"20\" rows=\"25\" onChange={this.onDataInputChange}></textarea>            \n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}