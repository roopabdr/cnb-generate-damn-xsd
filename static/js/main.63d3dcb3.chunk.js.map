{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","element_field","element_texarea","length_field","length_textarea","object_name","generateXSD","console","log","_this","concat","downloadTxtFile","content","element","document","createElement","file","Blob","type","href","URL","createObjectURL","download","body","appendChild","click","onDataInputChange","event","setState","target","value","onLengthInputChange","onObjectInputChange","onGenerateClick","elem_value","replace","trim","split","map","item","index","toString","length_value","this","react_default","a","className","placeholder","onChange","onClick","name","id","cols","rows","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAwGeA,oNAnGbC,MAAQ,CACNC,cAAe,GACfC,gBAAiB,GACjBC,aAAc,GACdC,gBAAiB,GACjBC,YAAa,MAGfC,YAAc,WACZC,QAAQC,IAAIC,EAAKT,MAAMC,cAAeQ,EAAKT,MAAMG,cAIhC,wgBAAAO,OAWID,EAAKT,MAAMK,YAXf,qKAAAK,OAcID,EAAKT,MAAMK,YAdf,iJA8BnBM,gBAAkB,SAACC,GACjB,IAAMC,EAAUC,SAASC,cAAc,KACjCC,EAAO,IAAIC,KAAK,CAACL,GAAU,CAACM,KAAM,aACxCL,EAAQM,KAAOC,IAAIC,gBAAgBL,GACnCH,EAAQS,SAAW,aACnBR,SAASS,KAAKC,YAAYX,GAC1BA,EAAQY,WAGVC,kBAAoB,SAACC,GACnBlB,EAAKmB,SAAS,CAAC1B,gBAAiByB,EAAME,OAAOC,WAG/CC,oBAAsB,SAACJ,GACrBlB,EAAKmB,SAAS,CAACxB,gBAAiBuB,EAAME,OAAOC,WAG/CE,oBAAsB,SAACL,GACrBlB,EAAKmB,SAAS,CAACvB,YAAasB,EAAME,OAAOC,WAG3CG,gBAAkB,WAChB,IAAIC,EAAazB,EAAKT,MAAME,gBAAgBiC,QAAQ,sBAAsB,IAAIC,OAAOC,MAAM,MAC3FH,EAAaA,EAAWI,IAAI,SAACC,EAAMC,GAAP,MAAiB,KAAOA,EAAQ,GAAGC,WAAW/B,OAAO,IAAI6B,EAAKJ,QAAQ,KAAK,QAEvG,IAAIO,EAAejC,EAAKT,MAAMI,gBAAgB+B,QAAQ,sBAAsB,IAAIC,OAAOC,MAAM,MAC7FK,EAAeA,EAAaJ,IAAI,SAACC,EAAMC,GAAP,MAAiB,KAAOA,EAAQ,GAAGC,WAAW/B,OAAO,IAAI6B,EAAKJ,QAAQ,KAAK,QAE3G1B,EAAKmB,SAAS,CAAC3B,cAAeiC,EAAY/B,aAAcuC,GAAe,WACrEC,KAAKrC,yFAKP,OACEsC,EAAAC,EAAA9B,cAAA,OAAK+B,UAAU,OACbF,EAAAC,EAAA9B,cAAA,cACE6B,EAAAC,EAAA9B,cAAA,uCACA6B,EAAAC,EAAA9B,cAAA,SAAOG,KAAK,OAAO6B,YAAY,uBAAuBD,UAAU,aAAaE,SAAUL,KAAKX,sBAC5FY,EAAAC,EAAA9B,cAAA,UAAQ+B,UAAU,UAAUG,QAASN,KAAKV,iBAA1C,aAEFW,EAAAC,EAAA9B,cAAA,OAAK+B,UAAU,UACbF,EAAAC,EAAA9B,cAAA,OAAK+B,UAAU,eACbF,EAAAC,EAAA9B,cAAA,0CACA6B,EAAAC,EAAA9B,cAAA,YAAUmC,KAAK,SAASC,GAAG,YAAYC,KAAK,KAAKC,KAAK,KAAKL,SAAUL,KAAKjB,qBAE5EkB,EAAAC,EAAA9B,cAAA,OAAK+B,UAAU,eACbF,EAAAC,EAAA9B,cAAA,6CACA6B,EAAAC,EAAA9B,cAAA,YAAUmC,KAAK,SAASC,GAAG,YAAYC,KAAK,KAAKC,KAAK,KAAKL,SAAUL,KAAKZ,gCA7FpEuB,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjB,EAAAC,EAAA9B,cAAC+C,EAAD,MAAShD,SAASiD,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.63d3dcb3.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n\n  state = {\n    element_field: [],    \n    element_texarea: '',\n    length_field: [],\n    length_textarea: '',\n    object_name: ''\n  }  \n  \n  generateXSD = () => {\n    console.log(this.state.element_field, this.state.length_field);\n    \n    let xsd_begin_wrapper = '';\n    let xsd_end_wrapper = '';\n    xsd_begin_wrapper = `<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n    <xsd:schema xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n            xmlns:nxsd=\"http://xmlns.oracle.com/pcbpel/nxsd\"\n            xmlns:tns=\"http://www.oracle.com/FTPAdapter\"\n            targetNamespace=\"http://www.oracle.com/FTPAdapter\"\n            elementFormDefault=\"qualified\"\n            attributeFormDefault=\"unqualified\"\n            nxsd:version=\"NXSD\"\n            nxsd:stream=\"chars\"\n            nxsd:encoding=\"US-ASCII\">\n        \n    <xsd:element name=\"${this.state.object_name}\">\n    <xsd:complexType>\n\t\t\t<xsd:choice minOccurs=\"0\" maxOccurs=\"unbounded\" nxsd:choiceCondition=\"fixedLength\" nxsd:length=\"0\">\n\t\t\t\t<xsd:element name=\"${this.state.object_name}_RECORD\" nxsd:style=\"array\" nxsd:cellSeparatedBy=\"\\${eol}\" nxsd:conditionValue=\"\">\n\t\t\t\t\t<xsd:complexType>\n            <xsd:sequence>`;\n    \n    xsd_end_wrapper = `</xsd:sequence>\n    </xsd:complexType>\n    </xsd:element>\n    </xsd:choice>\n    </xsd:complexType>\n    </xsd:element>\n    </xsd:schema>`;\n    \n    // console.log(xsd_begin_wrapper+xsd_end_wrapper);\n    // this.downloadTxtFile(xsd_begin_wrapper+xsd_end_wrapper);\n  }\n\n  downloadTxtFile = (content) => {\n    const element = document.createElement(\"a\");\n    const file = new Blob([content], {type: 'text/xml'});\n    element.href = URL.createObjectURL(file);\n    element.download = \"myFile.xsd\";\n    document.body.appendChild(element); // Required for this to work in FireFox\n    element.click();\n  }\n\n  onDataInputChange = (event) => {\n    this.setState({element_texarea: event.target.value});\n  }\n\n  onLengthInputChange = (event) => {\n    this.setState({length_textarea: event.target.value});\n  }\n\n  onObjectInputChange = (event) => {\n    this.setState({object_name: event.target.value});\n  }\n\n  onGenerateClick = () => {\n    let elem_value = this.state.element_texarea.replace(/^\\s*$(?:\\r\\n?|\\n)/gm,'').trim().split('\\n');\n    elem_value = elem_value.map((item, index) => 'f' + (index + 1).toString().concat('_',item.replace(/ /g,'_')));\n\n    let length_value = this.state.length_textarea.replace(/^\\s*$(?:\\r\\n?|\\n)/gm,'').trim().split('\\n');\n    length_value = length_value.map((item, index) => 'f' + (index + 1).toString().concat('_',item.replace(/ /g,'_')));\n\n    this.setState({element_field: elem_value, length_field: length_value}, function() {\n      this.generateXSD();\n    });    \n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <h1>Generate Damn XSD for CNB</h1>          \n          <input type=\"text\" placeholder='Enter Object RICE ID' className='input_text' onChange={this.onObjectInputChange}/>\n          <button className=\"success\" onClick={this.onGenerateClick}>Generate</button>\n        </header>\n        <div className='fields'>\n          <div className='fields_area'>\n            <h2>Copy/Paste field names here:</h2>\n            <textarea name=\"fields\" id=\"fields_id\" cols=\"40\" rows=\"25\" onChange={this.onDataInputChange}></textarea>\n          </div>\n          <div className='length_area'>\n            <h2>Copy/Paste field lenghts here: </h2>\n            <textarea name=\"fields\" id=\"fields_id\" cols=\"20\" rows=\"25\" onChange={this.onLengthInputChange}></textarea>\n          </div>\n        </div>      \n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}